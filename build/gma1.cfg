FEATURES {
    STARTADDRESS: default = $0334;
}
SYMBOLS {
    __LOADADDR__: type = import;
}
MEMORY {
    ZP:       file = "", start = $0002,  size = $00FE;
    LOADADDR: file = %O, start = %S - 2, size = $0002;
    MAIN:     file = %O, start = %S,     size = $0800 - %S;
    # in order for the stage 1 loader to call into the routine sandwiched
    # in the middle of the stage 3 loader we need to link against, but ignore,
    # the encrypted data blocks in the stage 3 loader so as to get the correct
    # address for the routine in the middle
    DATA:     file = "", start = %S,     size = $D000 - %S;
    FILL:     file = "", start = %S,     size = $D000 - %S;
    GMA3:     file = "", start = $4000,  size = $D000 - $4000;
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp, optional = yes;
    LOADADDR: load = LOADADDR, type = ro;
    GMA1:     load = MAIN,     type = rw;
    CODE:     load = GMA3,     type = rw, optional = yes;
    DATA:     load = GMA3,     type = rw, optional = yes, define = yes;
    FILL:     load = FILL,     type = ro, optional = yes;
}
