# "Elite" C64 disassembly / "Elite DX", cc0 2018, see LICENSE.txt
# "Elite" is copyright / trademark David Braben & Ian Bell, All Rights Reserved
# <github.com/Kroc/EliteDX>
#===============================================================================

FEATURES {
    STARTADDRESS:   default = $0334;
}
SYMBOLS {
    __PRGHEADER__:  type = import;
}
MEMORY {
    PRGHEADER:  file = %O,  start = %S - 2, size = $0002;
    
    ZP:         file = "",  start = $0002,  size = $00FE;
    MAIN:       file = %O,  start = %S,     size = $0800 - %S,  define = yes;

    # in order for the stage 1 loader to call into the routine sandwiched
    # in the middle of the stage 4 loader we need to link against, but ignore,
    # the encrypted data blocks in the stage 4 loader so as to get the correct
    # address for the routine in the middle
    DATA:       file = "",  start = %S,     size = $D000 - %S;
    FILL:       file = "",  start = %S,     size = $D000 - %S;
    GMA4:       file = "",  start = $4000,  size = $D000 - $4000;

    LORAM:      file = "",  start = $0700,  size = $4000 - $0700;
    HIRAM:      file = "",  start = $6A00,  size = $FFFF - $6A00;
}
SEGMENTS {
    ZEROPAGE:       load = ZP,          optional = yes;
    PRGHEADER:      load = PRGHEADER;
    
    CODE_GMA1:      load = MAIN;

    DATA_0700:      load = LORAM;
    DATA_FONT:      load = LORAM,   align = $100,   define = yes;
    DATA_0E00:      load = LORAM;
    DATA_1D00:      load = LORAM;
    CODE_GMA5:      load = LORAM;
    CODE_1D00:      load = LORAM;
    JUNK_GMA5:      load = LORAM;
    
    CODE:           load = GMA4,    optional = yes;
    STAGE4_DATA1:   load = GMA4,    optional = yes;
    DATA:           load = GMA4,    optional = yes, define = yes;
    FILL:           load = FILL,    optional = yes;

    CODE_6A00:      load = HIRAM;
    DATA_6A00:      load = HIRAM;
}
