# "Elite" C64 disassembly / "Elite DX", cc0 2018, see LICENSE.txt
# "Elite" is copyright / trademark David Braben & Ian Bell, All Rights Reserved
# <github.com/Kroc/EliteDX>
#===============================================================================

FEATURES {
    STARTADDRESS:   default = $0334;
}
SYMBOLS {
    __PRGHEADER__:  type = import;

    __DATA1_LOAD__: type = export,  value = __DATA_0700_LOAD__;
    __DATA1_SIZE__: type = export,
                    value = __DATA_0700_SIZE__
                          + __DATA_FONT_SIZE__
                          + __DATA_0E00_SIZE__
                          + __HULL_TABLE_SIZE__
                          + __HULL_DATA_SIZE__;

    __DATA2_LOAD__: type = export,  value = __CODE_INIT_LOAD__;
    __DATA2_SIZE__: type = export,
                    value = __CODE_INIT_SIZE__
                          + __HUD_SCRCOLOR_SIZE__
                          + __HUD_COLORRAM_SIZE__
                          + __DATA_SPRITES_SIZE__
                          + __DATA_7C3A_SIZE__
                          + __DATA_HUD_SIZE__;
}
MEMORY {
    # the .PRG header consists of the load address of the program;
    # it needs to occupy two bytes in the file, but not advance the address
    PRGHEADER:  file = %O,  start = %S - 2, size = $0002;
    
    ZP:         file = "",  start = $0002,  size = $00FE;
    MAIN:       file = %O,  start = %S,     size = $0800 - %S,  define = yes;

    # in order for the stage 1 loader to call into the routine sandwiched
    # in the middle of the stage 4 loader we need to link against, but ignore,
    # the encrypted data blocks in the stage 4 loader so as to get the correct
    # address for the routine in the middle
    DATA:       file = "",  start = %S,     size = $D000 - %S;
    FILL:       file = "",  start = %S,     size = $D000 - %S;
    
    GMA4:       file = "",  start = $4000,  size = $D000 - $4000;

    LORAM:      file = "",  start = $0700,  size = $4000 - $0700;
    HIRAM:      file = "",  start = $6A00,  size = $FFFF - $6A00;
}
SEGMENTS {
    ZEROPAGE:       load = ZP,          optional = yes;
    PRGHEADER:      load = PRGHEADER;
    
    CODE_STAGE1:    load = MAIN;

    #---------------------------------------------------------------------------

    CODE_6A00:      load = HIRAM;
    DATA_6A00:      load = HIRAM;

    #---------------------------------------------------------------------------

    # GMA4's 1st encrypted data block consists of this data set
    DATA_0700:      load = GMA4,    run = LORAM,    define = yes;
    DATA_FONT:      load = GMA4,    run = LORAM,    define = yes,  align = 256;
    DATA_0E00:      load = GMA4,    run = LORAM,    define = yes;
    HULL_TABLE:     load = GMA4,    run = HIRAM,    define = yes;
    HULL_DATA:      load = GMA4,    run = HIRAM,    define = yes;

    GMA4_JUNK1:     load = GMA4;

    CODE_STAGE4:    load = GMA4;

    # GMA4's 2nd encrypted data block consits of this data set
    CODE_INIT:      load = GMA4,                    define = yes;
    HUD_SCRCOLOR:   load = GMA4,                    define = yes;
    HUD_COLORRAM:   load = GMA4,                    define = yes;
    DATA_SPRITES:   load = GMA4,                    define = yes;
    DATA_7C3A:      load = GMA4,                    define = yes;
    DATA_HUD:       load = GMA4,    run = HIRAM,    define = yes;

    GMA4_JUNK2:     load = GMA4;

    #---------------------------------------------------------------------------
    
    DATA_1D00:      load = LORAM;
    CODE_GMA5:      load = LORAM;
    CODE_1D00:      load = LORAM;
    JUNK_GMA5:      load = LORAM;
    
    CODE:           load = GMA4,    optional = yes;
    STAGE4_DATA1:   load = GMA4,    optional = yes;
    DATA:           load = GMA4,    optional = yes, define = yes;
    FILL:           load = FILL,    optional = yes;
}
