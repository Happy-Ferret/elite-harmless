# "Elite" C64 disassembly / "Elite DX", cc0 2018, see LICENSE.txt
# "Elite" is copyright / trademark David Braben & Ian Bell, All Rights Reserved
# <github.com/Kroc/EliteDX>
#===============================================================================

SYMBOLS {
    __DATA1_LOAD__: type = export,  value = __DATA_0700_LOAD__;
    __DATA1_SIZE__: type = export,
                    value = __DATA_0700_SIZE__
                          + __DATA_FONT_SIZE__
                          + __DATA_0E00_SIZE__
                          + __HULL_TABLE_SIZE__
                          + __HULL_DATA_SIZE__;

    __DATA2_LOAD__: type = export,  value = __CODE_INIT_LOAD__;
    __DATA2_SIZE__: type = export,
                    value = __CODE_INIT_SIZE__
                          + __HUD_SCRCOLOR_SIZE__
                          + __HUD_COLORRAM_SIZE__
                          + __DATA_SPRITES_SIZE__
                          + __DATA_7C3A_SIZE__
                          + __DATA_HUD_SIZE__;
}
MEMORY {
    STAGE0:         file = "build/firebird.bin",
                    start = $02A7,  size = $030C - %S,      define = yes;

    #---------------------------------------------------------------------------

    GMA1:           file = "build/gma1.bin",
                    start = $0334,  size = $0800 - $0334;

    #---------------------------------------------------------------------------
    
    GMA4:           file = "",
                    start = $4000,  size = $D000 - $4000;

    #---------------------------------------------------------------------------

    C64_BASIC:      file = "",
                    start = $0801,  size = $A000 - $0801;

    LORAM:          file = "",
                    start = $0700,  size = $4000 - $0700;
    HIRAM:          file = "",
                    start = $6A00,  size = $FFFF - $6A00;

}
SEGMENTS {
    # loader stage 0: (FIREBIRD.PRG)
    #
    # the BASIC bootstrap is placed first in case the program is loaded into
    # $0801 instead of the the intended load address $02A7
    BASIC_STAGE0:   load = STAGE0,  run = C64_BASIC,    define = yes;
    # this is the intended code of FIREBIRD.PRG,
    # its only purpose is to load GMA1.PRG and start that
    CODE_STAGE0:    load = STAGE0,                      define = yes;
    # place the BASIC vectors at the right place regardless of other code
    BASIC_VECTORS:  load = STAGE0,  start = $0300,      define = yes;

    #---------------------------------------------------------------------------

    # loader stage 1: (GMA1.PRG)
    #
    # this program asks if the user wants the fast or slow loader, loads
    # GMA3.PRG for the copy-protection check and then loads in GMA4.PRG
    CODE_STAGE1:    load = GMA1,                        define = yes;

    #---------------------------------------------------------------------------

    # loader stage 6: (GMA6.PRG)
    #
    # this memory needs to be assigned before loader stage 4, as some data
    # packed into GMA4.PRG's encrypted blocks gets relocated into high-RAM
    # following GMA6.PRG's contents
    CODE_6A00:      load = HIRAM,   run = HIRAM;
    DATA_6A00:      load = HIRAM,   run = HIRAM;

    #---------------------------------------------------------------------------

    # loader stage 4: (GMA4.PRG)
    #
    # the stage-4 loader consists of two large blocks of scrambled code/data
    # with the decryption routine wedged between:
    #
    # $4000 +---------+
    #       |         |     DATA_0700       ("data_0700.asm")
    #       |         |     DATA_FONT       ("gfx/font.asm")
    #       |  DATA1  |     DATA_0E00       ("data_0E00.asm")
    #       |         |     HULL_TABLE      ("gfx/hulls.asm")
    #       |         |     HULL_DATA       ("gfx/hulls.asm")
    # $7593 +---------+
    #       |   CODE  |     decryption routine
    # $75E4 +---------+               
    #       |         |     CODE_INIT       ("elite_init.asm")
    #       |         |     HUD_SCRCOLOR    ("gfx/hud.asm")
    #       |  DATA2  |     HUD_COLORRAM    ("gfx/hud.asm")
    #       |         |     DATA_SPRITES    ("gfx/sprites.asm")
    #       |         |     DATA_7C3A       ("loader/gma4_7C3A.asm")
    #       |         |     DATA_HUD        ("gfx/hud.asm")
    # $8660 +---------+

    # GMA4's 1st encrypted data block consists of this data set
    DATA_0700:      load = GMA4,    run = LORAM,    define = yes;
    DATA_FONT:      load = GMA4,    run = LORAM,    define = yes,  align = 256;
    DATA_0E00:      load = GMA4,    run = LORAM,    define = yes;
    HULL_TABLE:     load = GMA4,    run = HIRAM,    define = yes;
    HULL_DATA:      load = GMA4,    run = HIRAM,    define = yes;
    # following the encrypted block, there a few unused junk bytes
    GMA4_JUNK1:     load = GMA4;

    # this is the decryption routine
    CODE_STAGE4:    load = GMA4;

    # GMA4's 2nd encrypted data block consits of this data set
    CODE_INIT:      load = GMA4,                    define = yes;
    HUD_SCRCOLOR:   load = GMA4,                    define = yes;
    HUD_COLORRAM:   load = GMA4,                    define = yes;
    DATA_SPRITES:   load = GMA4,                    define = yes;
    DATA_7C3A:      load = GMA4,                    define = yes;
    DATA_HUD:       load = GMA4,    run = HIRAM,    define = yes;
    # following the encrypted block, there a few unused junk bytes
    GMA4_JUNK2:     load = GMA4;

    #---------------------------------------------------------------------------
    
    # loader stage 5:
    DATA_1D00:      load = LORAM;
    CODE_GMA5:      load = LORAM;
    CODE_1D00:      load = LORAM;
    JUNK_GMA5:      load = LORAM;
}