# "Elite" C64 disassembly / "Elite DX", cc0 2018, see LICENSE.txt
# "Elite" is copyright / trademark David Braben & Ian Bell, All Rights Reserved
# <github.com/Kroc/EliteDX>
#===============================================================================

FEATURES {
    STARTADDRESS:   default = $4000;
}
SYMBOLS {
    __DATA2_LOAD__: type = export, value = __CODE_INIT_LOAD__;
    __DATA2_SIZE__: type = export, value = 0;
}
MEMORY {
    # don't include the first encrypted data block in the 2nd!
    DATA1:      file = "",  start = %S,     size = $D000 - %S;
    DATA2:      file = %O,  start = %S,     size = $D000 - %S;

    HULLS:      file = "",  start = $D000,  size = $FFFF - $D000;
}
SEGMENTS {
    # the location where the HUD data is copied *to* comes after the hull data,
    # this assigns the hull data without writing it to the file
    HULL_TABLE:     load = HULLS;
    HULL_DATA:      load = HULLS;

    # the already-encrypted first data-block
    DATA1:          load = DATA1,   run = DATA2,    define = yes;
    # junk padding-data that follows the first block
    JUNK1:          load = DATA1,   run = DATA2;
    # decryption routine
    CODE:           load = DATA1,   run = DATA2;
    # the code / data to be encrypted...
    CODE_INIT:      load = DATA2,                   define = yes;
    HUD_SCRCOLOR:   load = DATA2,                   define = yes;
    HUD_COLORRAM:   load = DATA2,                   define = yes;
    DATA_SPRITES:   load = DATA2,                   define = yes;
    DATA_7C3A:      load = DATA2,                   define = yes;
    DATA_HUD:       load = DATA2,   run = HULLS,    define = yes;

    # this junk padding-data comes after the 2nd data block
    # *after* encryption, so don't output it now
    JUNK2:          load = DATA1;
}
