# Elite C64 disassembly / Elite : Harmless, cc-by-nc-sa 2018-2019,
# see LICENSE.txt. "Elite" is copyright / trademark David Braben & Ian Bell,
# All Rights Reserved. <github.com/Kroc/elite-harmless>
#===============================================================================

MEMORY {
    # LOAD.PRG:
    #---------------------------------------------------------------------------
    LOADER_PRG: file  = "bin/load.prg",
                start = $02A7 - 2,  size = $0002,           define = yes;
    LOADER:     file  = "bin/load.prg",     fill = yes,     fillval = $EA,
                start = $02A7,      size = $030C - $02A7,   define = yes;

    # ELITE-HARMLESS.PRG
    #---------------------------------------------------------------------------
    # the .PRG header consists of the load address of the program;
    # it needs to occupy two bytes in the file, but not advance the address
    PRGHEADER:  file = %O,  start = %S - 2, size = $0002;

    # TODO: combine all the low-RAM into a single memory block

    # what looks like some variable space is defined at $0400..$0700
    VARS:       file = %O,  start = $0400,  size = $0700 - $0400, fill = yes;
    # 'low RAM' is the area below the VIC-II memory bank
    LORAM:      file = %O,  start = $0700,  size = $4000 - $0700, fill = yes;

    # position the two text/colour screens (1024 bytes each) and sprites
    # TODO: these should be BSS segments / positioned by calcualtion
    BITMAP:     file = %O,  start = $4000,  size = $2000, fill = yes;
    SCREEN1:    file = %O,  start = $6000,  size = $0400, fill = yes,  define = yes;
    SCREEN2:    file = %O,  start = $6400,  size = $0400, fill = yes,  define = yes;
    SPRITES:    file = %O,  start = $6800,  size = $6A00 - $6800, fill = yes;

    # 'high RAM' is the area above the VIC-II memory bank,
    # note that because this also covers the I/O & KERNAL area,
    # attention has to be paid to avoid conflicts with I/O & ROM
    HIRAM:      file = %O,  start = $6A00,  size = $D000 - $6A00, fill = yes;

    HIDATA:     file = %O,  start = $D000,  size = $FFFF - $D000;

    #---------------------------------------------------------------------------

    BASIC:      file = "",  start = $0801,  size = $A000 - $0801;
}

SEGMENTS {
    # LOAD.PRG:
    #---------------------------------------------------------------------------
    HEAD_LOAD:      load = LOADER_PRG;
    # the BASIC bootstrap is placed first in case the program is loaded into
    # $0801 instead of the the intended load address $02A7
    BASIC_LOAD:     load = LOADER,  run = BASIC,    define = yes;
    CODE_LOAD:      load = LOADER;
    # place the BASIC vectors at the right place regardless of other code
    BASIC_VECTORS:  load = LOADER,  start = $0300;

    #---------------------------------------------------------------------------
    # the .PRG header comes first in the file, obviously.
    # note that "prgheader.asm" actually populates this segment
    PRGHEADER:      load = PRGHEADER;

    # put the initialisation code in the variable space,
    # as it's only needed once and will be erased afterwards
    CODE_INIT:      load = VARS;

    #---------------------------------------------------------------------------

    TEXT_FLIGHT:    load = LORAM;
    GFX_FONT:       load = LORAM,   define = yes;
    TEXT_DOCKED:    load = LORAM,   define = yes;
    CODE_1D00:      load = LORAM;
    CODE_1D81:      load = LORAM;
    TEXT_TOKENS:    load = LORAM;
    TEXT_PAIRS:     load = LORAM;
    DATA_SAVE:      load = LORAM,   define = yes;
    DATA_2600:      load = LORAM;
    CODE_27A3:      load = LORAM;
    TEXT_PDESC:     load = LORAM;

    #---------------------------------------------------------------------------

    # pack the screen colour data into the bitmap for relocation
    HUD_SCRCOLOR:   load = BITMAP,  define = yes;
    HUD_COLORRAM:   load = BITMAP,  define = yes;
    GFX_SPRITES:    load = SPRITES;

    #---------------------------------------------------------------------------

    CODE_6A00:      load = HIRAM;
    DATA_9300:      load = HIRAM,   align = 256;
    TABLE_BITMAP:   load = HIRAM,   align = 256;
    CODE_9900:      load = HIRAM;
    DATA_B70E:      load = HIRAM;
    
    #---------------------------------------------------------------------------

    HULL_TABLE:     load = HIDATA;
    HULL_D042:      load = HIDATA;
    HULL_D062:      load = HIDATA;
    HULL_D083:      load = HIDATA;
    HULL_DATA:      load = HIDATA;
    GFX_HUD:        load = HIDATA,  define = yes;

    #---------------------------------------------------------------------------

    # the runtime storage for poly-objects (ships, asteroids, etc) in-play;
    # since this is variable space and not part of the on-disk code / data,
    # its type is "bss" which exlcudes it from being written to disk 
    POLYOBJS:       load = HIDATA,  type = bss,     align = $100;
}