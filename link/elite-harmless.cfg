# Elite C64 disassembly / Elite : Harmless, cc-by-nc-sa 2018-2019,
# see LICENSE.txt. "Elite" is copyright / trademark David Braben & Ian Bell,
# All Rights Reserved. <github.com/Kroc/elite-harmless>
#===============================================================================

# this file describes the memory layout of Elite : Harmless for packing onto
# disk using Exomizer: <https://bitbucket.org/magli143/exomizer/wiki/Home>
#
# Exomizer uses ZIP-like compression to reduce the size of the payload.
# given multiple input memory blocks (stored as separate PRG files), Exomizer
# will compress these into a single PRG file and unpack the contents into the
# original memory locations upon execution

SYMBOLS {
    ELITE_VIC_ADDR:     type = import;
    ELITE_BITMAP_ADDR:  type = import;
    ELITE_MENUSCR_ADDR: type = import;
    ELITE_MAINSCR_ADDR: type = import;
}

MEMORY {
    # working variable space (not written to disk)
    VARS_0400:  file  = "",
                start = $0400,  size = $0700 - $0400;

    # INIT.PRG
    #---------------------------------------------------------------------------
    INIT_PRG:   file  = "bin/init.prg",
                start = %S - 2,     size = $0002;

    INIT:       file  = "bin/init.prg",
                start = %S,         size = $0700 - %S;
    
    # PRG1.PRG
    #---------------------------------------------------------------------------
    PRG1_PRG:   file  = "bin/prg1.prg",
                start = $0700 - 2,  size = $0002;

    PRG1:       file  = "bin/prg1.prg",
                start = $0700,      size = $4000 - $0700;

    # PRG2.PRG
    #---------------------------------------------------------------------------
    PRG2_PRG:   file  = "bin/prg2.prg",
                start = $4000 - 2,  size = $0002;

    PRG2:       file  = "bin/prg2.prg",
                start = $4000,      size = $2000;

    # PRG3.PRG
    #---------------------------------------------------------------------------
    PRG3_PRG:   file  = "bin/prg3.prg",
                start = $6800 - 2,  size = $0002;

    PRG3:       file  = "bin/prg3.prg",
                start = $6800,      size = $10000 - $6800;
}

SEGMENTS {
    
    INIT_PRG:       load = INIT_PRG;
    CODE_INIT:      load = INIT;

    VARS_0400:      type = bss, define = yes,
                    load = VARS_0400;

    #---------------------------------------------------------------------------

    PRG1_PRG:       load = PRG1_PRG;
    GFX_FONT:       load = PRG1,    define = yes,   align = 256;
    TEXT_FLIGHT:    load = PRG1;
    TEXT_DOCKED:    load = PRG1,    define = yes;
    CODE_1D00:      load = PRG1;
    CODE_1D81:      load = PRG1;
    TEXT_TOKENS:    load = PRG1;
    TEXT_PAIRS:     load = PRG1;
    DATA_SAVE:      load = PRG1,    define = yes;
    DATA_2600:      load = PRG1;
    CODE_27A3:      load = PRG1;
    TEXT_PDESC:     load = PRG1;

    #---------------------------------------------------------------------------

    # pack the screen colour data into the bitmap for relocation
    PRG2_PRG:       load = PRG2_PRG;
    HUD_SCRCOLOR:   load = PRG2,    define = yes;
    HUD_COLORRAM:   load = PRG2,    define = yes;

    #---------------------------------------------------------------------------

    PRG3_PRG:       load = PRG3_PRG;
    GFX_SPRITES:    load = PRG3,    align = 64;

    # lookup tables for fast multiplication, consisting of
    # two 512-entry tables of 16-bit numbers
    TABLE_SQR:      load = PRG3,    align = 256,
                    optional = yes, define = yes;

    CODE_6A00:      load = PRG3;
    DATA_9300:      load = PRG3,    align = 256;
    TABLE_BITMAP_LO:load = PRG3;
    TABLE_BITMAP_HI:load = PRG3;
    CODE_9900:      load = PRG3;
    
    # note that the sound code relies heavily on page-boundaries even though
    # the original game didn't align it -- it worked by happenstance!
    CODE_SOUND:     load = PRG3,    align = 256;
    DATA_SOUND:     load = PRG3;

    HULL_TABLE:     load = PRG3;
    HULL_D042:      load = PRG3;
    HULL_D062:      load = PRG3;
    HULL_D083:      load = PRG3;
    HULL_DATA:      load = PRG3;
    HUD_DATA:       load = PRG3,    define = yes;

    # the runtime storage for poly-objects (ships, asteroids, etc) in-play;
    # since this is variable space and not part of the on-disk code / data,
    # its type is "bss" which exlcudes it from being written to disk
    POLYOBJS:       load = PRG3,    type = bss;
    
}